"""
Django settings for blog_project project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    # Cookies
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Rejestracja użytkownika
    'django.contrib.sites',

    # -------------- aplikacje zewnętrzne (3rd part apps)

    'rest_framework',
    # Authtoken app służy do generowania tokenów na serwerze
    'rest_framework.authtoken',
    # Rejestracja użytkownika
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # Django-Rest-Auth -> Endpoints
    'rest_auth',
    # Rejestracja
    'rest_auth.registration',

    # ---------------------------------------------------

    # Dodanie posts do listy aplikacji
    'posts.apps.PostsConfig',

    # Dodanie movies do listy aplikacji
    'movies.apps.MoviesConfig',

    # swagger
    'drf_yasg',

    # Filtrowanie
    'django_filters',    
]

# Ustawianie domyślnych ustawień
    # AllowAny - każdy użytkownik ma pełen dostęp
    # IsAuthenticated - tylko zarejestrowani, autentyfikowani
    # IsAdminUser - tylko administrator
    # IsAuthenticatedOrReadOnly - niezalogowani użytkownicy mogą 
    #       tylko przeglądać stronę, zalogowani dodawać, edytować i usuwać

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    # aby móc filtrować - dodanie backendu
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
    ],

    # Aby móc ustawiać domyślną wartość do Session Authentication i BasicAuthentication
    # Standardowo jest po to, by móc się zalogowywać i wylogowywać, natomiast z Basic
    # Authentication używany jest by przekazywać ID sesji w nagłówkach HTTP dla API 
    # //nic nie zmienia się po dodaniu//
    'DEFAULT_AUTHENTICATION_CLASSES': [ 
        # Potrzebne dla API, do przekazywania danych używane są tokeny
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        # Dodanie autoryzacji Tokenem, aby do niego przejść 
        # --> http://127.0.0.1:8000/admin/authtoken/tokenproxy/, nie token
        'rest_framework.authentication.TokenAuthentication',
    ],
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blog_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blog_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# Rejestracja użytkownika Backend, wysyłanie do konsoli
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Wbudowany framework, który pozwala na hostowanie wielu stron internetowych 
# w tym samym projekcie Django - zezwala na wiele
SITE_ID = 1
